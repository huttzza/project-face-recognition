#include "LedControl.h"

//Din 12
//Clk 11
//CS 10
//4 8x8 LED
LedControl lc = LedControl(12,11,10,4);

//https://xantorohara.github.io/led-matrix-editor/#6666667e66663c00|3e66663e66663e00|3c66060606663c00|3e66666666663e00|7e06063e06067e00|0606063e06067e00|3c66760606663c00|6666667e66666600|3c18181818183c00|1c36363030307800|66361e0e1e366600|7e06060606060600|c6c6c6d6feeec600|c6c6e6f6decec600|3c66666666663c00|06063e6666663e00|603c766666663c00|66361e3e66663e00|3c66603c06663c00|18181818185a7e00|7c66666666666600|183c666666666600|c6eefed6c6c6c600|c6c66c386cc6c600|1818183c66666600|7e060c1830607e00|%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200000000000000000|7c667c603c000000|3e66663e06060600|3c6606663c000000|7c66667c60606000|3c067e663c000000|0c0c3e0c0c6c3800|3c607c66667c0000|6666663e06060600|3c18181800180000|1c36363030003000|66361e3666060600|1818181818181800|d6d6feeec6000000|6666667e3e000000|3c6666663c000000|06063e66663e0000|f0b03c36363c0000|060666663e000000|3e403c027c000000|1818187e18180000|7c66666666000000|183c666600000000|7cd6d6d6c6000000|663c183c66000000|3c607c6666000000|3c0c18303c000000
const byte UPPER[][8] = {//upper case alphabet
{
  //A
      B00000000,
      B00111100,
      B01100110,
      B01100110,
      B01111110,
      B01100110,
      B01100110,
      B01100110
    },
  //B
    {
      B00000000,
      B01111100,
      B01100110,
      B01100110,
      B01111100,
      B01100110,
      B01100110,
      B01111100
    },
  //C
    {
      B00000000,
      B00111100,
      B01100110,
      B01100000,
      B01100000,
      B01100000,
      B01100110,
      B00111100
    },
  //D
    {
      B00000000,
      B01111100,
      B01100110,
      B01100110,
      B01100110,
      B01100110,
      B01100110,
      B01111100
    },
  //E
    {
      B00000000,
      B01111110,
      B01100000,
      B01100000,
      B01111100,
      B01100000,
      B01100000,
      B01111110
    },
  //F
    {
      B00000000,
      B01111110,
      B01100000,
      B01100000,
      B01111100,
      B01100000,
      B01100000,
      B01100000
    },
  //G
    {
      B00000000,
      B00111100,
      B01100110,
      B01100000,
      B01100000,
      B01101110,
      B01100110,
      B00111100
    },
  //H
    {
      B00000000,
      B01100110,
      B01100110,
      B01100110,
      B01111110,
      B01100110,
      B01100110,
      B01100110
    },
  //I
    {
      B00000000,
      B00111100,
      B00011000,
      B00011000,
      B00011000,
      B00011000,
      B00011000,
      B00111100
    },
  //J
    {
      B00000000,
      B00011110,
      B00001100,
      B00001100,
      B00001100,
      B01101100,
      B01101100,
      B00111000
    },
  //K
    {
      B00000000,
      B01100110,
      B01101100,
      B01111000,
      B01110000,
      B01111000,
      B01101100,
      B01100110
    },
  //L
    {
      B00000000,
      B01100000,
      B01100000,
      B01100000,
      B01100000,
      B01100000,
      B01100000,
      B01111110
    },
  //M
    {
      B00000000,
      B01100011,
      B01110111,
      B01111111,
      B01101011,
      B01100011,
      B01100011,
      B01100011
    },
  //N
    {
      B00000000,
      B01100011,
      B01110011,
      B01111011,
      B01101111,
      B01100111,
      B01100011,
      B01100011
    },
  //O
    {
      B00000000,
      B00111100,
      B01100110,
      B01100110,
      B01100110,
      B01100110,
      B01100110,
      B00111100
    },
  //P
    {
      B00000000,
      B01111100,
      B01100110,
      B01100110,
      B01100110,
      B01111100,
      B01100000,
      B01100000
    },
  //Q
    {
      B00000000,
      B00111100,
      B01100110,
      B01100110,
      B01100110,
      B01101110,
      B00111100,
      B00000110
    },
  //R
    {
      B00000000,
      B01111100,
      B01100110,
      B01100110,
      B01111100,
      B01111000,
      B01101100,
      B01100110
    },
  //S
    {
      B00000000,
      B00111100,
      B01100110,
      B01100000,
      B00111100,
      B00000110,
      B01100110,
      B00111100
    },
  //T
    {
      B00000000,
      B01111110,
      B01011010,
      B00011000,
      B00011000,
      B00011000,
      B00011000,
      B00011000
    },
  //U
    {
      B00000000,
      B01100110,
      B01100110,
      B01100110,
      B01100110,
      B01100110,
      B01100110,
      B00111110
    },
  //V
    {
      B00000000,
      B01100110,
      B01100110,
      B01100110,
      B01100110,
      B01100110,
      B00111100,
      B00011000
    },
  //W
    {
      B00000000,
      B01100011,
      B01100011,
      B01100011,
      B01101011,
      B01111111,
      B01110111,
      B01100011
    },
  //X
    {
      B00000000,
      B01100011,
      B01100011,
      B00110110,
      B00011100,
      B00110110,
      B01100011,
      B01100011
    },
  //Y
    {
      B00000000,
      B01100110,
      B01100110,
      B01100110,
      B00111100,
      B00011000,
      B00011000,
      B00011000
    },
  //Z
    {
      B00000000,
      B01111110,
      B00000110,
      B00001100,
      B00011000,
      B00110000,
      B01100000,
      B01111110
    },
};
const byte LOWER[][8] = {//lower case alphabet
  //a
    {
      B00000000,
      B00000000,
      B00000000,
      B00111100,
      B00000110,
      B00111110,
      B01100110,
      B00111110
    },{
      B00000000,
      B01100000,
      B01100000,
      B01100000,
      B01111100,
      B01100110,
      B01100110,
      B01111100
    },{
      B00000000,
      B00000000,
      B00000000,
      B00111100,
      B01100110,
      B01100000,
      B01100110,
      B00111100
    },{
      B00000000,
      B00000110,
      B00000110,
      B00000110,
      B00111110,
      B01100110,
      B01100110,
      B00111110
    },{
      B00000000,
      B00000000,
      B00000000,
      B00111100,
      B01100110,
      B01111110,
      B01100000,
      B00111100
    },{
      B00000000,
      B00011100,
      B00110110,
      B00110000,
      B00110000,
      B01111100,
      B00110000,
      B00110000
    },{
      B00000000,
      B00000000,
      B00111110,
      B01100110,
      B01100110,
      B00111110,
      B00000110,
      B00111100
    },{
      B00000000,
      B01100000,
      B01100000,
      B01100000,
      B01111100,
      B01100110,
      B01100110,
      B01100110
    },{
      B00000000,
      B00000000,
      B00011000,
      B00000000,
      B00011000,
      B00011000,
      B00011000,
      B00111100
    },{
      B00000000,
      B00001100,
      B00000000,
      B00001100,
      B00001100,
      B01101100,
      B01101100,
      B00111000
    },{
      B00000000,
      B01100000,
      B01100000,
      B01100110,
      B01101100,
      B01111000,
      B01101100,
      B01100110
    },{
      B00000000,
      B00011000,
      B00011000,
      B00011000,
      B00011000,
      B00011000,
      B00011000,
      B00011000
    },{
      B00000000,
      B00000000,
      B00000000,
      B01100011,
      B01110111,
      B01111111,
      B01101011,
      B01101011
    },{
      B00000000,
      B00000000,
      B00000000,
      B01111100,
      B01111110,
      B01100110,
      B01100110,
      B01100110
    },{
      B00000000,
      B00000000,
      B00000000,
      B00111100,
      B01100110,
      B01100110,
      B01100110,
      B00111100
    },{
      B00000000,
      B00000000,
      B01111100,
      B01100110,
      B01100110,
      B01111100,
      B01100000,
      B01100000
    },{
      B00000000,
      B00000000,
      B00111100,
      B01101100,
      B01101100,
      B00111100,
      B00001101,
      B00001111
    },{
      B00000000,
      B00000000,
      B00000000,
      B01111100,
      B01100110,
      B01100110,
      B01100000,
      B01100000
    },{
      B00000000,
      B00000000,
      B00000000,
      B00111110,
      B01000000,
      B00111100,
      B00000010,
      B01111100
    },{
      B00000000,
      B00000000,
      B00011000,
      B00011000,
      B01111110,
      B00011000,
      B00011000,
      B00011000
    },{
      B00000000,
      B00000000,
      B00000000,
      B01100110,
      B01100110,
      B01100110,
      B01100110,
      B00111110
    },{
      B00000000,
      B00000000,
      B00000000,
      B00000000,
      B01100110,
      B01100110,
      B00111100,
      B00011000
    },{
      B00000000,
      B00000000,
      B00000000,
      B01100011,
      B01101011,
      B01101011,
      B01101011,
      B00111110
    },{
      B00000000,
      B00000000,
      B00000000,
      B01100110,
      B00111100,
      B00011000,
      B00111100,
      B01100110
    },{
      B00000000,
      B00000000,
      B00000000,
      B01100110,
      B01100110,
      B00111110,
      B00000110,
      B00111100
    },{
      B00000000,
      B00000000,
      B00000000,
      B00111100,
      B00001100,
      B00011000,
      B00110000,
      B00111100
    }
};

const byte NONE[][8] = {
    { 
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000
     },
    { 
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000
     },{ 
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000
     },{ 
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000,
     B00000000
     },
};

const byte COMMA[8]{ 
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B01100000,
    B01100000,
    B00100000
};

const byte DUCK[][8]{
  {
    B00000000,
    B00110000,
    B01111000,
    B11111000,
    B00111000,
    B01111111,
    B01111110,
    B00111100
  },
  {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00010000,
    B00110000,
    B00011100,
    B00011000
  }
};

//initialize
void setup() {
 for(int num=0; num<4; num++) // 매트릭스 0번부터 3번까지 세팅
  {
   lc.shutdown(num,false); // 0~3번까지 매트릭스 절전모드 해제
   lc.setIntensity(num,2); // 0~3번까지 매트릭스의 밝기 0~15까지 가능
   lc.clearDisplay(num); // 0~3번까지 매트릭스 led를 초기화
  }
  Serial.begin(9600);
}

void loop() {
  char hello[] = "Hello, ";
  char temp[100];
  if(Serial.available() > 0){
    //Serial.readBytesUntil(character, buffer, length)
    byte leng = Serial.readBytesUntil('\n', temp, 100);// enter 이전까지 받아서 temp에 저장

    Serial.println(temp);
    //making full name matrix
    byte name_b[leng + 4][8];//name buffer ('name' + none)
    for(int i=0; i< leng; i++){
      if(temp[i] >= 'a' && temp[i] <= 'z'){ //lower case
        int idx = temp[i] - 'a';
        memcpy(&name_b[i], &LOWER[idx], sizeof(LOWER[idx]));
      }
      else if(temp[i] >= 'A' && temp[i] <= 'Z'){ //upper case
        int idx = temp[i] - 'A';
        memcpy(&name_b[i], &UPPER[idx], sizeof(UPPER[idx]));
      }
      else if(temp[i] == ' ')
        memcpy(&name_b[i], &NONE[0],sizeof(NONE[0]));
      else if(temp[i] == ',')
        memcpy(&name_b[i], &COMMA,sizeof(COMMA));
      else if(temp[i] == '-')
        memcpy(&name_b[i], &DUCK[0],sizeof(DUCK[0]));
      else if(temp[i] == '_')
        memcpy(&name_b[i], &DUCK[1],sizeof(DUCK[1]));
    }
    for(int i=0; i<4 ; i++){
      memcpy(&name_b[leng+i], &NONE[0],sizeof(NONE[0]));
    }

    //matrix buffer shift
    byte matrix[4+1][8]; //matrix buffer
    for (int i = 0; i < 4; i++)
    {
      for (int j = 0; j < 8; j++) 
      {
        matrix[i][j] = B00000000;
      }
    }

    for(int i=0; i< leng+4; i++){
      memcpy(&matrix[4], &name_b[i], sizeof(name_b[i]));
      for(int j=0; j < 8; j++){
        for(int k=0; k <8 ; k++){
          matrix[0][k] = (matrix[0][k] << 1) | (matrix[1][k] >> 7);
          matrix[1][k] = (matrix[1][k] << 1) | (matrix[2][k] >> 7);
          matrix[2][k] = (matrix[2][k] << 1) | (matrix[3][k] >> 7);
          matrix[3][k] = (matrix[3][k] << 1) | (matrix[4][k] >> 7);
          matrix[4][k] = (matrix[4][k] << 1);
        }
        // 출력 
       for (int k = 0; k < 8; k++) {
          // lc.setRow(matrix_number,Row,value)
          lc.setRow(0, k, matrix[3][k]);
          lc.setRow(1, k, matrix[2][k]);
          lc.setRow(2, k, matrix[1][k]);
          lc.setRow(3, k, matrix[0][k]);
         }
        delay(10); // 시프트 속도 10ms
      }
    } 
    //delay(1000);
  }//end of if
  /*else{
    for (int i = 0; i < 8; i++) {
      lc.setRow(0, i, NONE[3][i]);
      lc.setRow(1, i, NONE[2][i]);
      lc.setRow(2, i, NONE[1][i]);
      lc.setRow(3, i, NONE[0][i]);
     }
  }*/
}
